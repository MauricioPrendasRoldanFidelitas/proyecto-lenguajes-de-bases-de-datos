CREATE TABLE producto (
    id_producto NUMBER PRIMARY KEY,
    nombre VARCHAR2(100),
    precio NUMBER(10, 2),
    stock NUMBER
);

CREATE SEQUENCE producto_seq
START WITH 1
INCREMENT BY 1
NOCACHE
NOCYCLE;


-- Insertar
CREATE OR REPLACE PROCEDURE insertar_producto (
    p_nombre IN VARCHAR2,
    p_precio IN NUMBER,
    p_stock IN NUMBER
) AS
BEGIN
    INSERT INTO producto (id_producto, nombre, precio, stock)
    VALUES (producto_seq.NEXTVAL, p_nombre, p_precio, p_stock);
END;
/


-- Obtener todos
CREATE OR REPLACE PROCEDURE obtener_productos (
    p_cursor OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN p_cursor FOR
    SELECT id_producto, nombre, precio, stock FROM producto;
END;
/

-- Actualizar
CREATE OR REPLACE PROCEDURE actualizar_producto (
    p_id_producto IN NUMBER,
    p_nombre IN VARCHAR2,
    p_precio IN NUMBER,
    p_stock IN NUMBER
) AS
BEGIN
    UPDATE producto
    SET nombre = p_nombre,
        precio = p_precio,
        stock = p_stock
    WHERE id_producto = p_id_producto;
END;
/

-- Eliminar
CREATE OR REPLACE PROCEDURE eliminar_producto (
    p_id_producto IN NUMBER
) AS
BEGIN
    DELETE FROM producto WHERE id_producto = p_id_producto;
END;
/

-- Crear tabla cliente
CREATE TABLE cliente (
    id_cliente NUMBER PRIMARY KEY,
    nombre VARCHAR2(100) NOT NULL,
    apellido VARCHAR2(100) NOT NULL
);

-- Crear secuencia cliente_seq
CREATE SEQUENCE cliente_seq
START WITH 1
INCREMENT BY 1
NOCACHE
NOCYCLE;

-- Procedimiento para insertar cliente
CREATE OR REPLACE PROCEDURE insertar_cliente (
    p_nombre IN VARCHAR2,
    p_apellido IN VARCHAR2
) AS
BEGIN
    INSERT INTO cliente (id_cliente, nombre, apellido)
    VALUES (cliente_seq.NEXTVAL, p_nombre, p_apellido);
END;
/

-- Procedimiento para obtener clientes
CREATE OR REPLACE PROCEDURE obtener_clientes (
    p_cursor OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN p_cursor FOR
    SELECT id_cliente, nombre, apellido FROM cliente ORDER BY id_cliente;
END;
/

-- Procedimiento para actualizar cliente
CREATE OR REPLACE PROCEDURE actualizar_cliente (
    p_id_cliente IN NUMBER,
    p_nombre IN VARCHAR2,
    p_apellido IN VARCHAR2
) AS
BEGIN
    UPDATE cliente
    SET nombre = p_nombre,
        apellido = p_apellido
    WHERE id_cliente = p_id_cliente;
END;
/

-- Procedimiento para eliminar cliente
CREATE OR REPLACE PROCEDURE eliminar_cliente (
    p_id_cliente IN NUMBER
) AS
BEGIN
    DELETE FROM cliente WHERE id_cliente = p_id_cliente;
END;
/



CREATE TABLE empleado (
    id_empleado NUMBER PRIMARY KEY,
    nombre VARCHAR2(100),
    puesto VARCHAR2(50),
    salario NUMBER(10, 2)
);

CREATE SEQUENCE empleado_seq
START WITH 1
INCREMENT BY 1
NOCACHE
NOCYCLE;

-- Insertar
CREATE OR REPLACE PROCEDURE insertar_empleado (
    p_nombre IN VARCHAR2,
    p_puesto IN VARCHAR2,
    p_salario IN NUMBER
) AS
BEGIN
    INSERT INTO empleado (id_empleado, nombre, puesto, salario)
    VALUES (empleado_seq.NEXTVAL, p_nombre, p_puesto, p_salario);
END;
/

-- Obtener todos
CREATE OR REPLACE PROCEDURE obtener_empleados (
    p_cursor OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN p_cursor FOR
    SELECT id_empleado, nombre, puesto, salario FROM empleado;
END;
/

-- Actualizar
CREATE OR REPLACE PROCEDURE actualizar_empleado (
    p_id_empleado IN NUMBER,
    p_nombre IN VARCHAR2,
    p_puesto IN VARCHAR2,
    p_salario IN NUMBER
) AS
BEGIN
    UPDATE empleado
    SET nombre = p_nombre,
        puesto = p_puesto,
        salario = p_salario
    WHERE id_empleado = p_id_empleado;
END;
/

-- Eliminar
CREATE OR REPLACE PROCEDURE eliminar_empleado (
    p_id_empleado IN NUMBER
) AS
BEGIN
    DELETE FROM empleado WHERE id_empleado = p_id_empleado;
END;
/

CREATE TABLE pedido (
    id_pedido NUMBER PRIMARY KEY,
    fecha DATE DEFAULT SYSDATE,
    id_cliente NUMBER,
    FOREIGN KEY (id_cliente) REFERENCES cliente(id_cliente)
);

CREATE SEQUENCE pedido_seq
START WITH 1
INCREMENT BY 1
NOCACHE
NOCYCLE;

CREATE OR REPLACE PROCEDURE insertar_pedido (
    p_id_cliente IN NUMBER
) AS
BEGIN
    INSERT INTO pedido (id_pedido, fecha, id_cliente)
    VALUES (pedido_seq.NEXTVAL, SYSDATE, p_id_cliente);
END;
/

CREATE OR REPLACE PROCEDURE obtener_pedidos (
    p_cursor OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN p_cursor FOR
    SELECT id_pedido, fecha, id_cliente FROM pedido;
END;
/

CREATE OR REPLACE PROCEDURE actualizar_pedido (
    p_id_pedido IN NUMBER,
    p_id_cliente IN NUMBER
) AS
BEGIN
    UPDATE pedido
    SET id_cliente = p_id_cliente
    WHERE id_pedido = p_id_pedido;
END;
/

CREATE OR REPLACE PROCEDURE eliminar_pedido (
    p_id_pedido IN NUMBER
) AS
BEGIN
    DELETE FROM pedido
    WHERE id_pedido = p_id_pedido;
END;
/

CREATE TABLE detalle_pedido (
    id_detalle_pedido NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    id_pedido NUMBER NOT NULL,
    id_producto NUMBER NOT NULL,
    cantidad NUMBER NOT NULL,
    precio_unitario NUMBER(10, 2) NOT NULL,
    FOREIGN KEY (id_pedido) REFERENCES pedido(id_pedido),
    FOREIGN KEY (id_producto) REFERENCES producto(id_producto)
);

-- Insertar
CREATE OR REPLACE PROCEDURE insertar_detalle_pedido(
    p_id_pedido IN detalle_pedido.id_pedido%TYPE,
    p_id_producto IN detalle_pedido.id_producto%TYPE,
    p_cantidad IN detalle_pedido.cantidad%TYPE,
    p_precio_unitario IN detalle_pedido.precio_unitario%TYPE
) AS
BEGIN
    INSERT INTO detalle_pedido(id_pedido, id_producto, cantidad, precio_unitario)
    VALUES (p_id_pedido, p_id_producto, p_cantidad, p_precio_unitario);
END;
/

-- Listar
CREATE OR REPLACE PROCEDURE obtener_detalles_pedido(
    p_result OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN p_result FOR
    SELECT * FROM detalle_pedido;
END;
/

-- Actualizar
CREATE OR REPLACE PROCEDURE actualizar_detalle_pedido(
    p_id_detalle_pedido IN detalle_pedido.id_detalle_pedido%TYPE,
    p_id_pedido IN detalle_pedido.id_pedido%TYPE,
    p_id_producto IN detalle_pedido.id_producto%TYPE,
    p_cantidad IN detalle_pedido.cantidad%TYPE,
    p_precio_unitario IN detalle_pedido.precio_unitario%TYPE
) AS
BEGIN
    UPDATE detalle_pedido
    SET id_pedido = p_id_pedido,
        id_producto = p_id_producto,
        cantidad = p_cantidad,
        precio_unitario = p_precio_unitario
    WHERE id_detalle_pedido = p_id_detalle_pedido;
END;
/

-- Eliminar
CREATE OR REPLACE PROCEDURE eliminar_detalle_pedido(
    p_id_detalle_pedido IN detalle_pedido.id_detalle_pedido%TYPE
) AS
BEGIN
    DELETE FROM detalle_pedido
    WHERE id_detalle_pedido = p_id_detalle_pedido;
END;
/

-- Tabla
CREATE TABLE venta (
    id_venta NUMBER PRIMARY KEY,
    fecha DATE DEFAULT SYSDATE
);

-- Secuencia
CREATE SEQUENCE venta_seq
START WITH 1
INCREMENT BY 1
NOCACHE
NOCYCLE;

-- Procedimiento: insertar
CREATE OR REPLACE PROCEDURE insertar_venta IS
BEGIN
    INSERT INTO venta (id_venta, fecha)
    VALUES (venta_seq.NEXTVAL, SYSDATE);
END;
/


-- Procedimiento: obtener
CREATE OR REPLACE PROCEDURE obtener_ventas (
    p_cursor OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN p_cursor FOR
    SELECT id_venta, fecha FROM venta ORDER BY id_venta;
END;
/

-- Procedimiento: actualizar (en caso de que se quiera cambiar la fecha manualmente)
CREATE OR REPLACE PROCEDURE actualizar_venta (
    p_id_venta IN NUMBER,
    p_fecha IN DATE
) AS
BEGIN
    UPDATE venta
    SET fecha = p_fecha
    WHERE id_venta = p_id_venta;
END;
/

-- Procedimiento: eliminar
CREATE OR REPLACE PROCEDURE eliminar_venta (
    p_id_venta IN NUMBER
) AS
BEGIN
    DELETE FROM venta
    WHERE id_venta = p_id_venta;
END;
/

-- Crear tabla detalle_venta
CREATE TABLE detalle_venta (
  id_detalle_venta NUMBER PRIMARY KEY,
  id_venta NUMBER NOT NULL,
  id_producto NUMBER NOT NULL,
  cantidad NUMBER NOT NULL,
  FOREIGN KEY (id_venta) REFERENCES venta(id_venta),
  FOREIGN KEY (id_producto) REFERENCES producto(id_producto)
);

-- Crear secuencia
CREATE SEQUENCE seq_detalle_venta START WITH 1 INCREMENT BY 1;

-- Insertar
CREATE OR REPLACE PROCEDURE insertar_detalle_venta(
  p_id_venta IN NUMBER,
  p_id_producto IN NUMBER,
  p_cantidad IN NUMBER
) AS
BEGIN
  INSERT INTO detalle_venta(id_detalle_venta, id_venta, id_producto, cantidad)
  VALUES (seq_detalle_venta.NEXTVAL, p_id_venta, p_id_producto, p_cantidad);
END;
/

-- Obtener todos
CREATE OR REPLACE PROCEDURE obtener_detalles_venta(p_resultado OUT SYS_REFCURSOR) AS
BEGIN
  OPEN p_resultado FOR
    SELECT * FROM detalle_venta ORDER BY id_detalle_venta;
END;
/

-- Eliminar
CREATE OR REPLACE PROCEDURE eliminar_detalle_venta(p_id IN NUMBER) AS
BEGIN
  DELETE FROM detalle_venta WHERE id_detalle_venta = p_id;
END;
/


CREATE TABLE produccion (
    id_produccion NUMBER PRIMARY KEY,
    id_producto NUMBER NOT NULL,
    fecha DATE NOT NULL,

    CONSTRAINT fk_produccion_producto FOREIGN KEY (id_producto)
        REFERENCES producto(id_producto)
);

CREATE SEQUENCE produccion_seq
START WITH 1
INCREMENT BY 1
NOCACHE
NOCYCLE;

-- Insertar
CREATE OR REPLACE PROCEDURE insertar_produccion (
    p_id_producto IN NUMBER,
    p_fecha IN DATE
) AS
BEGIN
    INSERT INTO produccion (id_produccion, id_producto, fecha)
    VALUES (produccion_seq.NEXTVAL, p_id_producto, p_fecha);
END;
/
-- Obtener todas las producciones
CREATE OR REPLACE PROCEDURE obtener_producciones (
    p_cursor OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN p_cursor FOR
    SELECT id_produccion, id_producto, fecha
    FROM produccion
    ORDER BY id_produccion;
END;
/
-- Actualizar
CREATE OR REPLACE PROCEDURE actualizar_produccion (
    p_id_produccion IN NUMBER,
    p_id_producto IN NUMBER,
    p_fecha IN DATE
) AS
BEGIN
    UPDATE produccion
    SET id_producto = p_id_producto,
        fecha = p_fecha
    WHERE id_produccion = p_id_produccion;
END;
/
-- Eliminar
CREATE OR REPLACE PROCEDURE eliminar_produccion (
    p_id_produccion IN NUMBER
) AS
BEGIN
    DELETE FROM produccion WHERE id_produccion = p_id_produccion;
END;
/